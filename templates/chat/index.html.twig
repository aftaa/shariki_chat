{% extends 'base.html.twig' %}

{% block title %}Чаты{% endblock %}

{% block body %}
    <link rel="stylesheet" type="text/css" href="{{ asset('css/chat.new.css') }}?t={{ 'now'|date('U') }}">

    <main>
    </main>

    {% include 'chat/_footer.html.twig' %}

    <script>
        let socket;
        let status = false;
    </script>

    <script>let url = '{{ server.url }}?operator=1';</script>

    <script>
        function connect() {
            socket = new WebSocket(url);
            socket.onopen = function () {
                setStatus(true);
                command({command: 'operator_get_sessions', skip: true});
            }
            socket.onmessage = function (event) {
                let message = JSON.parse(event.data);
                switch (message.command) {
                    case 'operator_get_session':
                        drawSession(message.content);
                        break;
                    case 'operator_get_chat':
                        drawMessage(message.content);
                        break;
                    case 'operator_update_session':
                        updateSession(message.content);
                        break;
                }
            }
            socket.onerror = function (event) {
                setStatus(false);
                $('main').html('');
            }
            socket.onclose = function (event) {
                setStatus(false);
                $('main').html('');
            }
        }

        connect();
        setInterval(() => command({command: 'client_ping'}), 30000);
        setInterval(function () {
            if (!status) {
                connect();
            }
        }, 10000);

        {% include 'chat/_script.js' %}
    </script>

    <script>
        window.onload = () => {
            if (Notification.permission === "default") {
                Notification.requestPermission().then(perm => {
                    if (Notification.permission === "granted") {
                        console.log('granted')
                    } else {
                        alert("Please allow notifications.");
                    }
                });
            } else if (Notification.permission === "granted") {
                console.log('granted')
            } else {
                alert("Please allow notifications.");
            }
        };

        async function regWorker(message) {
            const publicKey = "BLEju4fZBvCwAJya8gG9rIqwgKpgqQPHPMk6BOwEyDei-2blAOU2yI3v04wp5d1ktwqdz1F8KTB1GfVUkFEMADE";
            navigator.serviceWorker.register("/sw1.js", {scope: "/"});
            navigator.serviceWorker.ready
                .then(reg => {
                    reg.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: publicKey
                    }).then(
                        sub => {
                            var data = new FormData();
                            data.append("sub", JSON.stringify(sub));
                            data.append("message", message);
                            fetch("/web-notification/push1", {method: "POST", body: data})
                                .then(res => res.text())
                                .then(txt => console.log(txt))
                                .catch(err => console.error(err));
                        },

                        // (B3-2) ERROR!
                        err => console.error(err)
                    );
                });
        }

        regWorker('test');
    </script>
{% endblock %}
