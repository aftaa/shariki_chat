{% extends 'base.html.twig' %}

{% block title %}Чаты{% endblock %}

{% block body %}
    <link rel="stylesheet" type="text/css" href="{{ asset('css/chat.all.css') }}?t={{ 'now'|date('U') }}">

    <main>
    </main>

    <footer>
        <div class="session">
            <div class="archive">
                <img alt="Архивировать" src="/images/archive.png">
            </div>
            <div class="open">
                <span>Сообщений: <span class="message-count"></span></span> |
                <span>Последнее: <span class="last-message"></span></span> |
                <span>Чат начат: <span class="started"></span></span>
            </div>

            <div class="chat">
                <div class="messages">
                    <div class="message visitor">
                        <div class="datetime"></div>
                        <div class="text"></div>
                    </div>
                    <div class="message operator">
                        <div class="datetime"></div>
                        <div class="text"></div>
                    </div>
                </div>
                <div class="form">
                    <input type="text">
                    <button>&gt;</button>
                </div>
            </div>
        </div>
    </footer>

    <script>
        let socket;
        let status = false;
    </script>

    <script>let url = '{{ server.url }}?operator=1';</script>

    <script>
        function command(command) {
            command = JSON.stringify(command);
            socket.send(command);
        }

        function connect() {
            socket = new WebSocket(url);
            socket.onopen = function () {
                setStatus(true);
                command({command: 'operator_get_sessions'});
            }
            socket.onmessage = function (event) {
                let message = JSON.parse(event.data);
                switch (message.command) {
                    case 'operator_get_session':
                        drawSession(message.content);
                        break;
                    case 'operator_get_chat':
                        drawMessage(message.content);
                        break;
                    case 'new_session':
                        drawSession(message.session, true);
                        break;
                    case 'upd_session':
                        updateSession(message);
                        break;
                }
            }
            socket.onerror = function (event) {
                setStatus(false);
                $('main').html('');
            }
            socket.onclose = function (event) {
                setStatus(false);
                $('main').html('');
            }
        }

        connect();

        setInterval(() => command({command: 'client_ping'}), 30000);

        function setStatus(connected) {
            status = connected;
            if (connected) {
                $('#status').addClass('connected');
            } else {
                $('#status').removeClass('connected');
            }
        }

        setInterval(function () {
            if (!status) {
                connect();
            }
        }, 10000);

        function drawSession(session, prepend) {
            let $div = $('footer .session').clone(true, true);
            $div.attr('id', 'session-' + session.name);
            $('.open', $div).attr('data-session', session.name);
            $('.archive', $div).attr('data-session', session.name);
            $('.message-count', $div).html(session.message_count);
            $('.last-message', $div).html(session.last_message);
            $('.started', $div).html(session.started);
            $('.chat', $div).attr('id', 'chat-' + session.name).hide();
            $('.messages', $div).attr('id', 'messages-' + session.name).html('');
            $('input, button', $div).attr('data-session', session.name);
            $('input', $div).attr('id', 'text-' + session.name);
            if (session.has_new_message) {
                $div.addClass('new-message');
            }
            if (!prepend) {
                $('main').append($div);
            } else {
                $('main').prepend($div);
            }
        }

        $('.session .open').on('click', function () {
            $('#messages-' + this.dataset.session).html('');
            command({
                command: 'operator_get_chat',
                session: this.dataset.session
            });
            $('.chat').hide();
            $('#chat-' + this.dataset.session).show();
            $('#session-' + this.dataset.session).removeClass('new-message');
        })

        function drawMessage(message) {
            if ('none' !== $('#chat-' + message.session).css('display')) {
                let $messages = $('#messages-' + message.session);
                let $message = $('footer ' + (message.isOperator ? '.operator' : '.visitor')).clone();
                $('.text', $message).html(message.message);
                $('.datetime', $message).html(message.created);
                $messages.append($message);
                scrollToBottom(message.session);
            } else {
                $('#session-' + message.session).addClass('new-message').prependTo('main');
            }
        }

        function scrollToBottom(session) {
            let chatMessages = document.getElementById("messages-" + session);
            if (chatMessages) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        $('button').on('click', function () {
            let session = this.dataset.session;
            let text = $('#text-' + session).val();
            if ($.trim(text)) {
                sendMessage(session, text);
                $('#text-' + session).val('')
            }
        })

        $('input').on('keypress', function (event) {
            if (13 === event.keyCode) {
                let session = this.dataset.session;
                let text = this.value;
                if ($.trim(text)) {
                    sendMessage(session, text);
                    this.value = '';
                }
            }
        })

        function sendMessage(session, text) {
            command({
                command: 'add_op_message',
                session: session,
                message: text,
                name: 'Оператор',
                isOperator: true
            });

            if ($('main .session:first').attr('id') !== 'session-' + session) {
                $('#session-' + session).prependTo('main');
            }
        }

        function updateSession(message) {
            let $div = $('#session-' + message.session);
            if ($div.length) {
                $('.message-count', $div).html(message.message_count);
                $('.last-message', $div).html(message.last_message);
            }
        }

        let width = $('.messages').width();
        $('.form input').width(width - 42);
        $('footer').hide();
    </script>

    <script>
        window.onload = () => {
            if (Notification.permission === "default") {
                Notification.requestPermission().then(perm => {
                    if (Notification.permission === "granted") {
                        console.log('granted')
                    } else {
                        alert("Please allow notifications.");
                    }
                });
            }
            else if (Notification.permission === "granted") {
                console.log('granted')
            }
            else {
                alert("Please allow notifications.");
            }
        };

        async function regWorker(message) {
            const publicKey = "BLEju4fZBvCwAJya8gG9rIqwgKpgqQPHPMk6BOwEyDei-2blAOU2yI3v04wp5d1ktwqdz1F8KTB1GfVUkFEMADE";
            navigator.serviceWorker.register("/sw1.js", {scope: "/"});
            navigator.serviceWorker.ready
                .then(reg => {
                    reg.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: publicKey
                    }).then(
                        sub => {
                            var data = new FormData();
                            data.append("sub", JSON.stringify(sub));
                            data.append("message", message);
                            fetch("/web-notification/push1", {method: "POST", body: data})
                                .then(res => res.text())
                                .then(txt => console.log(txt))
                                .catch(err => console.error(err));
                        },
                        err => console.error(err)
                    );
                });
        }
        regWorker('test');
    </script>
{% endblock %}
